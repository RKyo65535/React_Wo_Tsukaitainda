{"version":3,"sources":["hooks/usePrevious.ts","components/todo.tsx","components/FilterButton.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["usePrevious","value","ref","useRef","useEffect","current","Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","editButtonRef","wasEditing","editingTemplate","className","onSubmit","event","preventDefault","editTask","id","alert","htmlFor","titlename","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FilterButton","aria-pressed","isPressed","setFilter","name","Form","setName","addTask","autoComplete","FILTER_MAP","ALL","ACTIVE","task","COMPLETED","FILTER_NAMES","Object","keys","App","listHeadingRef","filter","tasks","setTasks","updatedTasks","map","console","log","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","prevTaskLength","newTask","nanoid","tabIndex","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8aad0e2f.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\n\n//以前の状態を取得する\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","import { ChangeEvent, FormEvent, useEffect, useRef, useState } from \"react\";\nimport { usePrevious } from \"../hooks/usePrevious\";\n\ntype Props = {\n  id: string;\n  titlename: string;\n  completed: boolean;\n  toggleTaskCompleted: (id: string) => void;\n  deleteTask: (id: string) => void;\n  editTask: (id: string, newname: string) => void;\n};\n\nexport default function Todo(props: Props) {\n  //編集状態\n  const [isEditing, setEditing] = useState(false);\n  //タスクの名前\n  const [newName, setNewName] = useState(\"\");\n\n  //選択状態\n  const editFieldRef = useRef<HTMLInputElement>(null);\n  const editButtonRef = useRef<HTMLButtonElement>(null);\n\n  //前の状態が編集だったか否か\n  const wasEditing = usePrevious(isEditing);\n\n  //文字変わった時イベント\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\n    setNewName(event.target.value);\n  }\n\n  //決定イベント\n  function handleSubmit(event: FormEvent) {\n    if (newName === \"\") {\n      alert(\"文字ぐらい入力してくれたっていいじゃない\");\n      return;\n    }\n    event.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  //編集状態と普通の状態で表示するリスト\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.titlename}\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.titlename}</span>\n        </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">\n            new name for {props.titlename}\n          </span>\n        </button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id={props.id}\n          type=\"checkbox\"\n          defaultChecked={props.completed}\n          onChange={() => props.toggleTaskCompleted(props.id)}\n        />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.titlename}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => setEditing(true)}\n          ref={editButtonRef}\n        >\n          Edit <span className=\"visually-hidden\">{props.titlename}</span>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn__danger\"\n          onClick={() => props.deleteTask(props.id)}\n        >\n          Delete <span className=\"visually-hidden\">{props.titlename}</span>\n        </button>\n      </div>\n    </div>\n  );\n\n  //なにか起こったらこれが呼ばれそう(あとから？)\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current?.focus();\n    }\n    if (wasEditing && !isEditing) {\n      editButtonRef.current?.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n  //こっちは必ず最初にRenderされる\n  //console.log(\"main render\");\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n","import { FilterName } from \"../feature/filter\";\n\ntype Props = {\n  name: FilterName;\n  isPressed: boolean;\n  setFilter: (name: FilterName) => void;\n};\n\nexport function FilterButton(props: Props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { Task } from \"../feature/task\";\n\ntype Props = {\n  addTask: (taskname: string) => void;\n};\n\nfunction Form(props: Props) {\n  //状態を管理する？\n  const [name, setName] = useState<Task[\"name\"]>(\"\");\n\n  function handleSubmit(event: FormEvent) {\n    if (name === \"\") {\n      alert(\"文字ぐらい入力してくれたっていいじゃない\");\n      return;\n    }\n    event.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n\n  // near the top of the `Form` component\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\n    setName(event.target.value);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useState, useRef, useEffect } from \"react\";\nimport Todo from \"./components/todo\";\nimport { FilterButton } from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport { Task } from \"./feature/task\";\nimport { FilterName } from \"./feature/filter\";\n\nimport { nanoid } from \"nanoid\";\nimport { usePrevious } from \"./hooks/usePrevious\";\n\n//こっちは再レンダリングされた際にリセットされない\n//すべてならば必ず真、そうでなければチェックボックスの状態によってかえるのだ。\nconst FILTER_MAP: { [K in FilterName]: (task: Task) => boolean } = {\n  ALL: () => true,\n  ACTIVE: (task) => !task.completed,\n  COMPLETED: (task) => task.completed,\n};\n\n// FILTER_MAP がこの値なのが確定なので\nconst FILTER_NAMES = Object.keys(FILTER_MAP) as FilterName[];\n\ntype Props = {\n  tasks: Task[];\n};\n\nfunction App(props: Props) {\n  //現在の参照先\n  const listHeadingRef = useRef<HTMLHeadingElement>(null);\n\n  //フィルターの状態\n  const [filter, setFilter] = useState<FilterName>(\"ALL\");\n  //task state\n  const [tasks, setTasks] = useState<Task[]>(props.tasks);\n\n  //タスクのトグルが押されたときボタン\n  function toggleTaskCompleted(id: Task[\"id\"]) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n    console.log(tasks[0]);\n  }\n\n  //タスク削除ボタン\n  function deleteTask(id: Task[\"id\"]) {\n    //自身以外をリストに残す形で、自信を滅する\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  //タスク追加ボタン\n  function addTask(name: Task[\"name\"]) {\n    const newTask: Task = { id: \"id\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  //タスク編集ボタン\n  function editTask(id: Task[\"id\"], newName: string) {\n    const editedTaskList = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  //上位存在からデータの一覧をtaskと言う名前で引っ張ってきた\n  //フィルターに応じた者だけを表示するようにする\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        id={task.id}\n        titlename={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n  //フィルターの一覧表示。\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  //タスクの数を数えて、適切な文字を出すのだ\n  const tasksNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  //前状態のリストの長さをゲット\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current?.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">{filterList}</div>\n      <h2 id=\"list-heading\" tabIndex={-1} ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","//index.jsがエントリーポイント、田き覚えた\n\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Task } from \"./feature/task\";\n\n//最初のデーター\n\nconst initialTasks: Task[] = [\n  { id: \"todo-0\", name: \"食べる\", completed: true },\n  { id: \"todo-1\", name: \"寝るる！！\", completed: false },\n  { id: \"todo-2\", name: \"学ぶる！！\", completed: false },\n];\n\nReactDOM.render(\n  <StrictMode>\n    <App tasks={initialTasks} />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}